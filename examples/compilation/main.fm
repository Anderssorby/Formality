T Nat
| zero; 
| succ(pred: Nat);

Nat.add(n: Nat, m: Nat): Nat
  case n:
  | zero    => m;
  | succ(n) => Nat.succ(Nat.add(n)(m));

Nat.mul(n: Nat, m: Nat): Nat
  case n:
  | zero    => m;
  | succ(n) => Nat.succ(Nat.add(n)(m));

Nat.double(n: Nat): Nat
  case n:
  | zero    => Nat.zero;
  | succ(n) => Nat.succ(Nat.succ(Nat.double(n)));

T List (A: Type)
| nil;
| cons(x: A, xs: List(A));

List.range.tco(lim: Nat, xs: List(Nat)): List(Nat)
  case lim:
  | zero    => xs;
  | succ(n) => List.range.tco(n, List.cons<>(n, xs));
  
List.range(lim: Nat): List(Nat)
  List.range.tco(lim, List.nil<>)

List.sum.tco(xs: List(Nat), sum: Nat): Nat
  case xs:
  | nil         => sum;
  | cons(x, xs) => List.sum.tco(xs, Nat.add(x, sum));

List.sum(xs: List(Nat)): Nat
  List.sum.tco(xs, Nat.zero)

main: Nat
  List.sum(List.range(Nat.mul(Nat.double(1000), Nat.double(1000))))
